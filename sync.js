// –§—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
async function syncData() {
    try {
        showSyncStatus('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...', 'sync');
        
        const localData = loadFromLocalStorage();
        const remoteData = await loadFromGist();
        
        let finalData;
        
        if (!localData && !remoteData) {
            console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏–≥–¥–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
            await initializeDefaultData();
            return;
        }
        
        if (!localData) {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Gist (–ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ—Ç)');
            finalData = remoteData;
        } else if (!remoteData) {
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–µ—Ç)');
            finalData = localData;
        } else {
            const localTime = new Date(localData.lastUpdated || 0);
            const remoteTime = new Date(remoteData.lastUpdated || 0);
            
            if (remoteTime > localTime) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Gist –Ω–æ–≤–µ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö');
                finalData = remoteData;
            } else {
                console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö');
                finalData = localData;
            }
        }
        
        businesses = finalData.businesses || [];
        applications = finalData.applications || [];
        lastSyncTime = finalData.lastUpdated;
        
        await saveDataEverywhere(finalData);
        updateUI();
        
        showSyncStatus('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        showSyncStatus('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error');
        
        const localData = loadFromLocalStorage();
        if (localData) {
            businesses = localData.businesses || [];
            applications = localData.applications || [];
            updateUI();
            console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
    }
}

async function saveDataWithSync() {
    try {
        showSyncStatus('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...', 'sync');
        
        const dataToSave = {
            businesses: businesses,
            applications: applications,
            lastUpdated: new Date().toISOString(),
            version: '1.0'
        };
        
        await saveDataEverywhere(dataToSave);
        lastSyncTime = dataToSave.lastUpdated;
        
        showSyncStatus('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showSyncStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
        return false;
    }
}

async function saveDataEverywhere(data) {
    saveToLocalStorage(data);
    await saveToGist(data);
}

// LocalStorage —Ñ—É–Ω–∫—Ü–∏–∏
function loadFromLocalStorage() {
    try {
        const savedData = localStorage.getItem('krasnodar_business_data');
        if (savedData) {
            return JSON.parse(savedData);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
    }
    return null;
}

function saveToLocalStorage(data) {
    try {
        localStorage.setItem('krasnodar_business_data', JSON.stringify(data));
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
        return false;
    }
}

// Gist —Ñ—É–Ω–∫—Ü–∏–∏
async function loadFromGist() {
    try {
        const response = await fetch(`https://api.github.com/gists/${CONFIG.GIST_CONFIG.GIST_ID}?t=${Date.now()}`);
        
        if (!response.ok) {
            if (response.status === 404) {
                console.log('‚ö†Ô∏è Gist –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
                return null;
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const gistData = await response.json();
        const fileContent = gistData.files[CONFIG.GIST_CONFIG.FILENAME].content;
        return JSON.parse(fileContent);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Gist:', error);
        return null;
    }
}

async function saveToGist(data) {
    try {
        let sha = null;
        try {
            const fileResponse = await fetch(`https://api.github.com/gists/${CONFIG.GIST_CONFIG.GIST_ID}`);
            if (fileResponse.ok) {
                const fileData = await fileResponse.json();
                sha = fileData.files[CONFIG.GIST_CONFIG.FILENAME].sha;
            }
        } catch (e) {
            console.log('‚ÑπÔ∏è Gist –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π');
        }
        
        const response = await fetch(
            `https://api.github.com/gists/${CONFIG.GIST_CONFIG.GIST_ID}`,
            {
                method: 'PATCH',
                headers: {
                    'Authorization': `token ${CONFIG.GIST_CONFIG.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    description: `Krasnodar RP Business Data - Updated ${new Date().toLocaleString()}`,
                    files: {
                        [CONFIG.GIST_CONFIG.FILENAME]: {
                            content: JSON.stringify(data, null, 2),
                            sha: sha
                        }
                    }
                })
            }
        );
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Gist');
        }
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Gist');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Gist:', error);
        throw error;
    }
}

async function initializeDefaultData() {
    businesses = DEFAULT_BUSINESSES;
    applications = [];
    
    const dataToSave = {
        businesses: businesses,
        applications: applications,
        lastUpdated: new Date().toISOString(),
        version: '1.0'
    };
    
    await saveDataEverywhere(dataToSave);
    updateUI();
    
    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}
